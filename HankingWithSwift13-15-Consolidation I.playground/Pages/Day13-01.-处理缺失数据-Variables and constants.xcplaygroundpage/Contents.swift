//: [Previous](@previous)

// 视频教程-变量和常量 https://www.hackingwithswift.com/read/0/2/variables-and-constants

import UIKit

var name = "Tim McGraw"
name = "Romeo"

//let name = "Tim McGraw"
//name = "Romeo"


/*:

 ## 变量和常量
 
 每个有用的程序都需要在某个时刻存储数据，而在 Swift 中有两种方法可以做到：变量和常量。变量是可以随时更改其值的数据存储，而常量是您设置一次且永远不会更改的数据存储。所以，变量的值可以变化，而常量的值是不变的——很简单，对吧？

 拥有这两个选项似乎毫无意义，毕竟你可以只创建一个变量然后永远不改变它——为什么需要将它设为常量？好吧，事实证明，许多程序员都——震惊！– 不擅长编程，我们会犯错误。

 将常量和变量分开的优点之一是 Xcode 会告诉我们是否犯了错误。如果我们说，“让这个日期成为一个常数，因为我知道它永远不会改变”，那么 10 行之后尝试改变它，Xcode 将拒绝构建我们的应用程序。

 
 
 
 常量也很重要，因为它们让 Xcode 决定它构建应用程序的方式。如果它知道一个值永远不会改变，它就能够应用优化来使您的代码运行得更快。

 在 Swift 中，您可以使用var关键字创建一个变量，如下所示：

 var name = "Tim McGraw"
 让我们把它放到一个操场上，这样你就可以开始获得反馈。删除除该import UIKit行之外的所有内容（这是引入 Apple 核心 iOS 框架的部分，稍后需要），然后添加该变量。你应该看到下面的图片。

 在 Xcode Playgrounds 中，你在左边输入你的代码，一秒钟后在右边看到结果。

 因为这是一个变量，您可以随时更改它，但您不应var每次都使用该关键字——只有在您声明新变量时才使用该关键字。试试写这个：

 var name = "Tim McGraw"
 name = "Romeo"
 因此，第一行创建name变量并为其提供初始值，然后第二行更新name变量，使其值现在为“Romeo”。您将在 Playground 的结果区域中看到这两个值。

 现在，如果我们把它变成一个常数而不是一个变量呢？好吧，常量使用let关键字而不是var，因此您可以将第一行代码更改为说let name而不是var name这样：

 import UIKit
 let name = "Tim McGraw"
 name = "Romeo"
 但是现在出现了一个问题：Xcode 在第三行旁边显示了一个红色警告符号，它应该在您的代码下方绘制了一条波浪形下划线。如果您单击红色警告符号，Xcode 会告诉您问题：“无法分配给 'let' 值 'name'”——这是 Xcode 所说的“您正在尝试更改常量，但您不能这样做” .”

 ![logo](13-01-01.webp "local image")


 
 如果您尝试在 Swift 中更改常量，Xcode 将拒绝构建您的应用程序。

 ![logo](13-01-02.webp "local image")

 所以，常量是向 Swift 和你自己承诺一个值不会改变的好方法，因为如果你尝试改变它，Xcode 将拒绝运行。Swift 开发人员强烈倾向于尽可能使用常量，因为它使您的代码更易于理解。事实上，在最新版本的 Swift 中，Xcode 实际上会告诉你，如果你将某些东西设为变量，那么永远不要改变它！

 重要提示：变量和常量名称在代码中必须是唯一的。如果您尝试两次使用相同的变量名，则会出现错误，如下所示：

 var name = "Tim McGraw"
 var name = "Romeo"
 如果 Playground 在您的代码中发现错误，它会在红框中标记警告，或者只是拒绝运行。您会知道是否发生了后者，因为结果窗格中的文本变为灰色而不是通常的黑色。
 
 */



//: [Day13-02.-数据类型-Types of Data](@next)
