//: [Day13-09.-开关案例-Switch case](@previous)


// 视频教程-函数 https://www.hackingwithswift.com/read/0/11/functions


//: 基本案例
//let vw = UIView()
//
//UIView.animate(withDuration: 0.5, animations: {
//    vw.alpha = 0
//})

//let vw = UIView()
//
//UIView.animate(withDuration: 0.5) {
//    vw.alpha = 0
//}
/*:
 

 ## 闭包

 
 到目前为止，您已经遇到过整数、字符串、双精度数、浮点数、布尔值、数组、字典、结构体和类，但还有另一种类型的数据在 Swift 中被广泛使用，它被称为闭包。它们很复杂，但它们是如此强大和富有表现力，以至于它们在 Cocoa Touch 中被广泛使用，所以如果不了解它们，你就不会走得太远。

 闭包可以被认为是一个保存代码的变量。因此，当一个整数保存 0 或 500 时，闭包保存 Swift 代码行。闭包还捕获创建它们的环境，这意味着它们会复制其中使用的值。

 您永远不需要设计自己的闭包，因此如果您发现以下内容非常复杂，请不要害怕。然而，Cocoa 和 Cocoa Touch 都会经常要求你写闭包来满足他们的需求，所以你至少需要知道它们是如何工作的。我们先举一个 Cocoa Touch 的例子：

 let vw = UIView()

 UIView.animate(withDuration: 0.5, animations: {
     vw.alpha = 0
 })
 UIView是 UIKit 中的一种 iOS 数据类型，表示最基本的用户界面容器。现在不要担心它的作用，重要的是它是基本的用户界面组件。UIView有一个被调用的方法animate()，它可以让你使用动画来改变界面的外观——你描述发生了什么变化以及改变了多少秒，剩下的由 Cocoa Touch 完成。

 该animate()方法在该代码中采用两个参数：动画的秒数，以及包含要作为动画一部分执行的代码的闭包。我指定了半秒作为第一个参数，对于第二个参数，我要求 UIKit 将视图的 alpha（即不透明度）调整为 0，这意味着“完全透明”。

 这个方法需要使用闭包，因为 UIKit 必须做各种工作来准备动画开始，所以发生的事情是 UIKit 获取大括号内代码的副本（这是我们的闭包），将其存储起来，它的所有准备工作，然后在准备好时运行我们的代码。如果我们直接运行我们的代码，这是不可能的。

 上面的代码还展示了闭包如何捕获它们的环境：我vw在闭包外部声明了常量，然后在内部使用了它。Swift 检测到这一点，并在闭包中也提供该数据。

 Swift 自动捕获闭包环境的系统非常有用，但有时会让您感到困惑：如果对象 A 将闭包存储为属性，并且该属性也引用对象 A，那么您就有了一个称为强引用循环的东西，您将有不满意的用户。这是一个比您现在需要知道的更高级的主题，所以现在不要太担心。

 尾随闭包
 由于闭包的使用如此频繁，Swift 可以应用一些语法糖来使您的代码更易于阅读。规则是这样的：如果方法的最后一个参数采用闭包，您可以消除该参数，而是将其作为大括号内的代码块提供。例如，我们可以将之前的代码转换为：

 let vw = UIView()

 UIView.animate(withDuration: 0.5) {
     vw.alpha = 0
 }
 它确实让你的代码更短、更容易阅读，所以这种语法形式——称为尾随闭包语法——是首选
 */



//: [Next](@next)
