//: [Day08-06.-字符串的属性和方法-Properties and methods of strings](@previous)
// 视频教程-数组的属性和方法 https://www.hackingwithswift.com/sixty/7/7/properties-and-methods-of-arrays
// 为什么字符串的行为与 Swift 中的数组不同？ https://www.hackingwithswift.com/quick-start/understanding-swift/why-do-strings-behave-differently-from-arrays-in-swift

// 测试: 数组的属性和方法 https://www.hackingwithswift.com/review/properties-and-methods-of-arrays


var toys = ["Woody"]
print(toys.count)
toys.append("Buzz")         // 添加
toys.firstIndex(of: "Buzz") // 打印索引位置
print(toys.sorted())
toys.remove(at: 0)          // 删除




/*:
 ## 为什么字符串的行为与 Swift 中的数组不同？
 
 如果您仔细想想，字符串实际上只是许多组合在一起形成文本的单个字符：例如，“Hello”。但是，虽然 Swift 允许我们使用 读取数组值myArray[3]，但我们不能对字符串做同样的事情——这 myString[3]是无效的。

 其原因可以追溯到表情符号和其他类似的复杂字符，它们由多个特殊字符背靠背组成。尽管它们是单独的字母，但它们必须被视为一个有凝聚力的单元：我们不能只采用表情符号的一部分，因为它没有意义。例如，美国国旗由字符“区域指示符字母 U”和“区域指示符字母 BS”组成，将它们放在一起解释为美国国旗。

 这两个字符不能单独分开——如果你读到字符串的第一个字符，你不会想得到“区域指示符号字母 U”，或者美国国旗的一半，或者一些奇怪的东西。相反，它们需要保持在一起才能使表情符号有意义。

 这意味着，如果您有一个包含四个表情符号的字符串，则您的字符串可能包含 10 个甚至 20 个这些特殊符号。它们中的许多本身对人类来说可能毫无意义，只有在与周围的其他特殊符号结合时才具​​有正确的表情符号含义。

 现在考虑尝试使用类似myString[3]. 如果我在方格纸上写出一个字符串，每个框一个字母，然后让你跳到第四个字母，你只需数出四个框，你就会在那里——你实际上不需要知道有多少每个盒子里都有字母。并且该系统扩展性非常好：如果我们的方格纸每页有 50 个方框，而我让您阅读 50,000 个字母，您甚至可以跳过数百页甚至不计算方框，因为您知道每个方框总是正好有一个字母，并且每页 50 盒。

 现在想象我对你说，实际上只有一些字母占据了方格纸上的一个盒子。有的拿了两盒，有的拿了三盒，有的拿了四盒，有的拿了五盒，有的甚至更多。你现在如何找到字母 50,000？

 答案是您需要从第一个字母开始，然后一个一个框一个一个地移动，检查每个框以查看它本身是否包含一个字母，或者是一个特殊字符，它是一个更大的字母的一部分。信件。

 好吧，这个小小的思想实验实际上正是 Swift 的工作原理：如果您要求在字符串中输入 50,000 个字符，它需要从头开始并逐个字母地计数，直到找到您想要的那个。它很慢，并且通过您想要阅读的字符串越远越慢。

 所以 Swift 团队做出了一个决定：是的，他们绝对可以完成myString[49999]工作，但如果他们这样做了，你可能会认为代码很简单。因此，他们特意使该功能不可用，这样人们就不会意外编写它并想知道为什么他们的代码很慢。

 如果您很好奇，数组没有同样的问题，因为它们将所有内容存储在一个大小完全相同的盒子中。这是因为它们的用法与字符串非常不同：我们几乎总是完整地使用字符串，而从数组中读取单个项更为常见。

 在我完成之前，我想补充一件你可能没有想到的事情：如果你想检查一个字符串是否为空，你应该这样写：

 if myString.isEmpty {
     // code
 }
 而不是这个：

 if myString.count == 0 {
     // code
 }
 如果字符串有任何字母，第一个代码可以返回 true，但第二个代码必须计算字符串中的所有字母 - 必须遍历我们网格纸中的所有框 - 只是为了将最终数字与 0 进行比较。

 如果您想了解有关此主题的更多详细信息，我有一篇博客文章会有所帮助：https : //www.hackingwithswift.com/articles/181/why-using-isempty-is-faster-than-checking-count- 0
 
 ---
 
 
 ## 数组的属性和方法
 
 数组也是结构体，这意味着它们也有自己的方法和属性，我们可以用来查询和操作数组。

 这是一个让我们开始的简单数组：

 var toys = ["Woody"]
 您可以使用数组的count属性读取数组中的项目数：

 print(toys.count)
 如果要添加新项目，请使用如下append()方法：

 toys.append("Buzz")
 您可以使用它的firstIndex()方法定位数组中的任何项目，如下所示：

 toys.firstIndex(of: "Buzz")
 这将返回 1，因为数组从 0 开始计数。

 就像字符串一样，您可以让 Swift 按字母顺序对数组的项进行排序：

 print(toys.sorted())
 最后，如果要删除项目，请使用如下remove()方法：

 toys.remove(at: 0)
 数组有更多的属性和方法——尝试输入toys.以打开 Xcode 的代码完成选项。
 
 */


//: [Day09-总结](@next)
