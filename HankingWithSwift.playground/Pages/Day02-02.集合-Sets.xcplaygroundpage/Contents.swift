//: [Day02-01.数组-Arrays](@previous)
// 视频教程 https://www.hackingwithswift.com/sixty/2/2/sets
// 测试 https://www.hackingwithswift.com/review/sets

let colors = Set(["red", "green", "blue"])
let colors2 = Set(["red", "green", "blue", "red", "blue"])



/*:
 ## 为什么 Swift 中的集合与数组不同？
 集合和数组在 Swift 中都很重要，了解它们的区别将帮助您了解在任何给定情况下应该选择哪一个。

 集合和数组都是数据的集合，这意味着它们在单个变量中保存多个值。然而， 它们如何保存它们的值很重要：集合是无序的并且不能包含重复项，而数组保留它们的顺序并且可以包含重复项。

 这两个差异可能看起来很小，但它们有一个有趣的副作用：因为集合不需要按照添加对象的顺序存储对象，而是可以以看似随机的顺序存储它们，从而优化它们以实现快速检索。所以，当你说“这个集合是否包含项目 X”时，无论集合有多大，你都会在一瞬间得到答案。

 相比之下，数组必须按照你给它们的顺序存储它们的项，所以要检查项 X 是否存在于包含 10,000 个项的数组中，Swift 需要从第一项开始并检查每个项直到找到 - 或者可能不是'根本没找到。

 这种差异意味着当你想说“这个项目存在吗？”时，集合更有用。例如，如果你想检查一个词是否出现在字典中，你应该使用一个集合：你没有重复，并且你想要快速查找。

 有关此主题的更多信息，请查看 Antoine van der Lee 的帖子：https : //www.avanderlee.com/swift/array-vs-set-differences-explained/
---
 
 
 ## 集合
 
 集合就像数组一样是值的集合，除了它们有两个不同之处：

 项目不以任何顺序存储；它们以有效的随机顺序存储。
 任何物品都不能在一个集合中出现两次；所有项目必须是唯一的。
 您可以直接从数组创建集合，如下所示：

 let colors = Set(["red", "green", "blue"])
 当您查看colorsPlayground 输出内部的值时，您会发现它与我们用来创建它的顺序不匹配。这并不是一个真正的随机顺序，它只是无序的——Swift 不保证它的顺序。因为它们是无序的，所以不能像使用数组那样使用数字位置从集合中读取值。

 如果您尝试将重复项插入到集合中，则重复项将被忽略。例如：

 let colors2 = Set(["red", "green", "blue", "red", "blue"])
 最终colors2集仍将仅包含红色、绿色和蓝色一次。
 */

//: [Day02-03.元组-Tuples](@next)
