//: [Day11-06.-协议和扩展摘要-Protocols and extensions summary](@previous)
// 视频教程-处理缺失数据 https://www.hackingwithswift.com/sixty/10/1/handling-missing-data
// 为什么 Swift 有可选？ https://www.hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-optionals

// 测试: 处理缺失数据 https://www.hackingwithswift.com/review/handling-missing-data


var age: Int? = nil
age = 38




/*:
 ## 为什么 Swift 有可选？
 
 Swift 的可选项是其最强大的特性之一，同时也是令人困惑的特性之一。它们的核心工作很简单：它们允许我们表示某些数据的缺失——一个不仅仅是空的字符串，而且实际上并不存在。

 在 Swift 中，任何数据类型都可以是可选的：

 整数可能是 0、-1、500 或任何其他数字范围。
 一个可选的整数可能是所有的正整数值，但也可能是nil-它可能不存在。
 一个字符串可能是“Hello”，可能是莎士比亚全集，也可能是“”——一个空字符串。
 一个可选的字符串可能是任何规则的字符串值，但也可能是nil。
 自定义User结构可以包含描述用户的各种属性。
 一个可选的 User结构可以包含所有这些相同的属性，或者根本不存在。
 区分“它可能是该类型的任何可能值”和“它可能为零”是理解可选项的关键，有时这并不容易。

 例如，想想布尔值：它们可以是真或假。这意味着一个可选的 Bool 可以是真、假或两者都不是——它可以什么都不是。这在心理上有点难以理解，因为在任何给定的时间肯定某些事情总是对还是错？

 好吧，回答我这个问题：我喜欢巧克力吗？除非你是我的朋友或者在 Twitter 上密切关注我，否则你不能肯定地说——你不能肯定地说是（我喜欢巧克力）或错（我不喜欢巧克力），因为你只是不知道。当然，你可以问我并找出答案，但在你这样做之前，唯一安全的答案是“我不知道”，在这种情况下，可以通过将布尔值设为具有 nil 值的可选值来表示。

 当您考虑空字符串“”时，这也有点令人困惑。该字符串不包含任何内容，但这与nil 不同——空字符串仍然是字符串。

 当你在学习时，可选项会让人感到非常痛苦——你可能认为 Swift 不需要它们，你可能认为它们只是挡路，而且每次你​​不得不使用它们时你可能会磨牙。但是请相信我：几个月后它们会变得非常合理，你会想知道没有它们你是如何生存的！

 有关可选项的另一个观点，请查看 Brian Voong 的此视频：https : //www.youtube.com/watch?v= 7a7As0uNWOQ


 
 ---
 
 
 ## 处理缺失数据
 
 我们已经使用了诸如Int5 之类的类型来保存值。但是如果你想age为用户存储一个属性，如果你不知道某人的年龄，你会怎么做？

 您可能会说“好吧，我将存储 0”，但是您会在新生婴儿和您不知道年龄的人之间混淆。您可以使用一个特殊的数字，例如 1000 或 -1 来表示“未知”，这两个数字都是不可能的年龄，但是您真的会在所有使用它的地方记住这个数字吗？

 Swift 的解决方案称为optionals，您可以使用任何类型创建可选项。一个可选的整数可能有一个像 0 或 40 这样的数字，但它可能根本没有值——它可能实际上是缺失的，这nil在 Swift 中。

 要使类型可选，请在其后添加问号。例如，我们可以像这样创建一个可选的整数：

 var age: Int? = nil
 那没有任何数字——它什么也没有。但是如果我们以后知道那个年龄，我们就可以使用它：

 age = 38
 
 */


//: [Day12-02.-展开选项-Unwrapping optionals](@next)
